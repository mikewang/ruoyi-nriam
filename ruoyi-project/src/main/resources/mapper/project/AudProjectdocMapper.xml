<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.mapper.AudProjectdocMapper">
  <resultMap id="BaseResultMap" type="com.ruoyi.project.domain.AudProjectdoc">
    <result column="ProjectID" jdbcType="INTEGER" property="projectid" />
    <result column="DocID" jdbcType="INTEGER" property="docid" />
    <result column="DocType" jdbcType="VARCHAR" property="doctype" />
    <result column="IfDeleted" jdbcType="BIT" property="ifdeleted" />
    <result column="DocName" jdbcType="VARCHAR" property="docname" />
    <result column="RelativePath" jdbcType="VARCHAR" property="relativepath" />
  </resultMap>

  <sql id="selectAudProjectDoc">
    SELECT a.ProjectID      ,a.DocID      ,a.DocType      ,a.IfDeleted, b.DocName,b.RelativePath
    FROM Aud_ProjectDoc a join BAS_Doc b on a.DocID = b.DocID
    where a.IfDeleted=0
  </sql>

  <select id="selectProjectdocList" parameterType="com.ruoyi.project.domain.AudProjectdoc" resultMap="BaseResultMap">
    <include refid="selectAudProjectDoc"/>

    <if test="doctype != null and doctype != '' ">
      and  a.DocType = #{doctype,jdbcType=VARCHAR}
    </if>
    <if test="projectid != null and projectid != 0 ">
      and a.ProjectID = #{projectid, jdbcType=INTEGER}
    </if>

  </select>


  <insert id="insertProjectdoc" parameterType="com.ruoyi.project.domain.AudProjectdoc">
    insert into Aud_ProjectDoc (ProjectID, DocID, DocType,IfDeleted)
    values (#{projectid,jdbcType=INTEGER}, #{docid,jdbcType=INTEGER}, #{doctype,jdbcType=VARCHAR}, 
      #{ifdeleted,jdbcType=BIT})
  </insert>


  <insert id="deleteProjectdoc" parameterType="com.ruoyi.project.domain.AudProjectdoc">
    update  Aud_ProjectDoc
        set IfDeleted =1
        where IfDeleted =0
    <if test="docid != null and docid != 0 ">
      and  DocID = #{docid,jdbcType=INTEGER}
    </if>
    <if test="projectid != null and projectid != 0 ">
      and ProjectID = #{projectid, jdbcType=INTEGER}
    </if>
   </insert>

  <insert id="mergeProjectdoc" parameterType="List">

    merge into Aud_ProjectDoc as t
    using (
    <foreach item="item" index="index" collection="list" open="(" separator=" union all " close=")">
      select #{item.projectid,jdbcType=INTEGER} as ProjectID,#{item.docid,jdbcType=INTEGER} as DocID,#{item.doctype,jdbcType=VARCHAR} as DocType, 0 as IfDeleted
    </foreach>
    ) as s
        on  t.ProjectID = s.ProjectID and t.DocID = s.DocID and t.DocType = s.DocType and t.IfDeleted=0
    when not matched
    then insert values(s.ProjectID , s.DocID,s.DocType ,0);

  </insert>

  <insert id="sourceMergeProjectdoc" parameterType="List">
    update  Aud_ProjectDoc set IfDeleted =1
    where IfDeleted =0
    and exists(select 1 from
    (
    <foreach item="item" index="index" collection="list" open="(" separator=" union all " close=")">
      select #{item.projectid,jdbcType=INTEGER} as ProjectID,#{item.docid,jdbcType=INTEGER} as DocID,#{item.doctype,jdbcType=VARCHAR} as DocType, 0 as IfDeleted
    </foreach>
    ) as s where s.ProjectID = Aud_ProjectDoc.ProjectID and s.DocType=Aud_ProjectDoc.DocType)
    and not exists(select 1 from
    (
    <foreach item="item" index="index" collection="list" open="(" separator=" union all " close=")">
      select #{item.projectid,jdbcType=INTEGER} as ProjectID,#{item.docid,jdbcType=INTEGER} as DocID,#{item.doctype,jdbcType=VARCHAR} as DocType, 0 as IfDeleted
    </foreach>
    ) as s where s.ProjectID = Aud_ProjectDoc.ProjectID and s.DocType=Aud_ProjectDoc.DocType and s.DocID = Aud_ProjectDoc.DocID);

  </insert>

  <select id="selectAll" resultMap="BaseResultMap">
    select ProjectID, DocID, DocType, IfDeleted
    from Aud_ProjectDoc
  </select>
</mapper>